counter<-1
bad_cols <- c('choice', 'sub_num', 'Unnamed: 0', 'index_rows')
good_cols <- c('pr_many____ev','sr_one___norm_prob','sr_one___norm_prob')
name_cols <-c('PR','PRG','SRG')
cols <- setdiff(colnames(df3), bad_cols)
for (col in good_cols) {
if (grepl('rwd', col)) {
name_col <- strsplit(col, '_rwd0')[[1]][1]
} else if (grepl('prob', col)) {
name_col <- strsplit(col, '_prob0')[[1]][1]
} else {
name_col <- col
}
print(paste('working on model :', name_col))
probs_a0 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action0"), colnames(df3))])
probs_a1 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action1"), colnames(df3))])
rwds_a0 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action0"), colnames(df3))])
rwds_a1 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action1"), colnames(df3))])
all_rewards <- cbind(rwds_a0, rwds_a1)
all_rewards_max <- apply(all_rewards, 1, max)
r1 <- rwds_a0
r2 <- rwds_a1
p1 <- probs_a0
p2 <- probs_a1
length_data <- nrow(df3)
p1_r1 <- matrix(p1 * r1, nrow = length_data)
p2_r2 <- matrix(p2 * r2, nrow = length_data)
df_a1_a2 <- data.frame(a1 = rowSums(p1_r1)-rowSums(p2_r2))
df_a1_a2$a1_scaled <- scale(df_a1_a2$a1)
df_model <- cbind(df3[c("choices", "sub_num")], df_a1_a2)
model_formula <- bf(choices ~  0+a1_scaled + (0+a1_scaled | sub_num), family = bernoulli())
prior <- c(prior_string("uniform(0.01,10)", lb=0),
prior_(~cauchy(0,1), class = ~sd))
model <- brm(model_formula, chains = 2, iter = 2000,
control = list(adapt_delta = 0.99), data = df_model,
prior = prior, save_pars = save_pars(all = TRUE))
# Call bridge_sampler with the compiled model
bridge_sampler_obj <- bridge_sampler(model)
bridge_sampler_obj<-as.numeric(bridge_sampler_obj[1])
print(bridge_sampler_obj)
dict_BICs_prvg3[[name_cols[counter]]] <- bridge_sampler_obj[1]-LL_null
counter<-counter+1}
df3 <- read.csv('all_subs_Study1_actionvaluesrounded_restofqueries.csv')
num_trials <- nrow(df3)
# Calculate the log likelihood of guessing
# log(0.5) * number of trials
LL_null <- log(0.5) * num_trials
sub_idxs <- as.factor(df3$sub_num)
coords <- list(subj = unique(sub_idxs), obs_id = seq_along(sub_idxs))
dict_traces <- list()
dict_model <- list()
sub_id <- unique(df3$sub_num)
counter<-1
bad_cols <- c('choice', 'sub_num', 'Unnamed: 0', 'index_rows')
good_cols <- c('sr_many____ev','pr_many____ev','pr_one____rwd','sr_one____rwd')
name_cols <-c('SR','PR','PRG','SRG')
cols <- setdiff(colnames(df3), bad_cols)
for (col in good_cols) {
if (grepl('rwd', col)) {
name_col <- strsplit(col, '_rwd0')[[1]][1]
} else if (grepl('prob', col)) {
name_col <- strsplit(col, '_prob0')[[1]][1]
} else {
name_col <- col
}
print(paste('working on model :', name_col))
probs_a0 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action0"), colnames(df3))])
probs_a1 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action1"), colnames(df3))])
rwds_a0 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action0"), colnames(df3))])
rwds_a1 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action1"), colnames(df3))])
all_rewards <- cbind(rwds_a0, rwds_a1)
all_rewards_max <- apply(all_rewards, 1, max)
r1 <- rwds_a0
r2 <- rwds_a1
p1 <- probs_a0
p2 <- probs_a1
length_data <- nrow(df3)
p1_r1 <- matrix(p1 * r1, nrow = length_data)
p2_r2 <- matrix(p2 * r2, nrow = length_data)
df_a1_a2 <- data.frame(a1 = rowSums(p1_r1)-rowSums(p2_r2))
df_a1_a2$a1_scaled <- scale(df_a1_a2$a1)
df_model <- cbind(df3[c("choices", "sub_num")], df_a1_a2)
model_formula <- bf(choices ~  0+a1_scaled + (0+a1_scaled | sub_num), family = bernoulli())
prior <- c(prior_string("uniform(0.01,10)", lb=0),
prior_(~cauchy(0,1), class = ~sd))
model <- brm(model_formula, chains = 2, iter = 2000,
control = list(adapt_delta = 0.99), data = df_model,
prior = prior, save_pars = save_pars(all = TRUE))
# Call bridge_sampler with the compiled model
bridge_sampler_obj <- bridge_sampler(model)
bridge_sampler_obj<-as.numeric(bridge_sampler_obj[1])
print(bridge_sampler_obj)
dict_BICs_prvg3[[name_cols[counter]]] <- dict_BICs_prvg3[[name_cols[counter]]]+bridge_sampler_obj[1]-LL_null
counter<-counter+1}
# Convert the log marginal likelihoods to a data frame
log_marginal_likelihoods_df <- data.frame(
Variable = names(dict_BICs_prvg3),
LogMarginalLikelihood = as.numeric(unlist(dict_BICs_prvg3)),
stringsAsFactors = FALSE
)
# Plot the log marginal likelihoods
# Plot the log marginal likelihoods
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = ggtitle(expression(paste("ln(BF), BF=:", frac(model, null)))), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "black", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40),
axis.title.x = element_text(size = 40),
axis.title.y = element_text(size = 40))
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = ggtitle(expression(paste("ln(BF), BF=:", frac(model, null)))), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "black", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40),
axis.title.x = element_text(size = 40),
axis.title.y = element_text(size = 40))
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
getwd()
# Plot the log marginal likelihoods
# Plot the log marginal likelihoods
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = ggtitle(expression(paste("ln(BF), BF=:", frac(model, null)))), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "black", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40),
axis.title.x = element_text(size = 40),
axis.title.y = element_text(size = 40))
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
# Plot the log marginal likelihoods
# Plot the log marginal likelihoods
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(BF), BF=:", frac(model, null))), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "black", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40),
axis.title.x = element_text(size = 40),
axis.title.y = element_text(size = 40))
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
# Plot the log marginal likelihoods
# Plot the log marginal likelihoods
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(", frac(model, null),")")), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "black", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40),
axis.title.x = element_text(size = 40),
axis.title.y = element_text(size = 40))
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(", frac(model, null),")")), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "black", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black"), # Reduce size for y-axis title
axis.line = element_line(color = "black", size = 1.5)) # Add black lines for axes
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(", frac(model, null),")")), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black"), # Reduce size for y-axis title
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
)
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(", frac(model, null),")")), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black")) # Reduce size for y-axis title
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(Bayes Factor=", frac(model, null),")")), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black")) # Reduce size for y-axis title
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = expression(paste("ln(Bayes Factor = ", frac(model, null),")")), title = "Model Comparison") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black")) # Reduce size for y-axis title
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
getwd()
library(dplyr)
library(brms)
library(ggplot2)
df3 <- read.csv('all_subs_Study1_actionvaluesrounded_PRvsGuessing.csv')
num_trials <- nrow(df3)
# Calculate the log likelihood of guessing
# log(0.5) * number of trials
LL_null <- log(0.5) * num_trials
sub_idxs <- as.factor(df3$sub_num)
coords <- list(subj = unique(sub_idxs), obs_id = seq_along(sub_idxs))
dict_traces <- list()
dict_model <- list()
dict_BICs_prvg3 <- list()
dict_BICs_prvg3[['SR']] <- 0
dict_BICs_prvg3[['MB']] <- 0
sub_id <- unique(df3$sub_num)
counter<-1
bad_cols <- c('choice', 'sub_num', 'Unnamed: 0', 'index_rows')
good_cols <- c('pr_many____ev','pr_one___norm_prob','sr_one___norm_prob','BR')
name_cols <-c('PR','PRG','SRG')
name_cols <- c(name_cols, 'BR')
cols <- setdiff(colnames(df3), bad_cols)
for (col in good_cols) {
if (grepl('rwd', col)) {
name_col <- strsplit(col, '_rwd0')[[1]][1]
} else if (grepl('prob', col)) {
name_col <- strsplit(col, '_prob0')[[1]][1]
} else {
name_col <- col
}
print(paste('working on model :', name_col))
# After fitting the model, but before the end of the for loop
# Fit the BR model which is just a single parameter -- an intercept
if (col == 'BR') {
# Use the choices column directly for the intercept-only model
model_formula <- bf(choices ~ 1, family = bernoulli())
prior <- c(prior_string("normal(0, 1)", class = "Intercept"))
model <- brm(model_formula, chains = 2, iter = 2000,
control = list(adapt_delta = 0.99), data = df_model,
prior = prior, save_pars = save_pars(all = TRUE))
# Call bridge_sampler with the compiled model
bridge_sampler_obj <- bridge_sampler(model)
bridge_sampler_obj <- as.numeric(bridge_sampler_obj[1])
print(bridge_sampler_obj)
dict_BICs_prvg3[[name_col]] <- bridge_sampler_obj[1] - LL_null
}
else {
probs_a0 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action0"), colnames(df3))])
probs_a1 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action1"), colnames(df3))])
rwds_a0 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action0"), colnames(df3))])
rwds_a1 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action1"), colnames(df3))])
all_rewards <- cbind(rwds_a0, rwds_a1)
all_rewards_max <- apply(all_rewards, 1, max)
r1 <- rwds_a0
r2 <- rwds_a1
p1 <- probs_a0
p2 <- probs_a1
length_data <- nrow(df3)
p1_r1 <- matrix(p1 * r1, nrow = length_data)
p2_r2 <- matrix(p2 * r2, nrow = length_data)
df_a1_a2 <- data.frame(a1 = rowSums(p1_r1)-rowSums(p2_r2))
df_a1_a2$a1_scaled <- scale(df_a1_a2$a1)
df_model <- cbind(df3[c("choices", "sub_num")], df_a1_a2)
model_formula <- bf(choices ~  0+a1_scaled + (0+a1_scaled | sub_num), family = bernoulli())
prior <- c(prior_string("uniform(0.01,10)", lb=0),
prior_(~cauchy(0,1), class = ~sd))
model <- brm(model_formula, chains = 2, iter = 2000,
control = list(adapt_delta = 0.99), data = df_model,
prior = prior, save_pars = save_pars(all = TRUE))
# Call bridge_sampler with the compiled model
bridge_sampler_obj <- bridge_sampler(model)
bridge_sampler_obj<-as.numeric(bridge_sampler_obj[1])
print(bridge_sampler_obj)
dict_BICs_prvg3[[name_cols[counter]]] <- bridge_sampler_obj[1]-LL_null}
counter<-counter+1}
df3 <- read.csv('all_subs_Study1_actionvaluesrounded_restofqueries.csv')
num_trials <- nrow(df3)
# Calculate the log likelihood of guessing
# log(0.5) * number of trials
LL_null <- log(0.5) * num_trials
sub_idxs <- as.factor(df3$sub_num)
coords <- list(subj = unique(sub_idxs), obs_id = seq_along(sub_idxs))
dict_traces <- list()
dict_model <- list()
sub_id <- unique(df3$sub_num)
counter<-1
bad_cols <- c('choice', 'sub_num', 'Unnamed: 0', 'index_rows')
good_cols <- c('sr_many____ev','pr_many____ev','pr_one____rwd','sr_one____rwd','BR')
name_cols <-c('SR','PR','PRG','SRG')
name_cols <- c(name_cols, 'BR')
cols <- setdiff(colnames(df3), bad_cols)
for (col in good_cols) {
if (grepl('rwd', col)) {
name_col <- strsplit(col, '_rwd0')[[1]][1]
} else if (grepl('prob', col)) {
name_col <- strsplit(col, '_prob0')[[1]][1]
} else {
name_col <- col
}
print(paste('working on model :', name_col))
if (col == 'BR') {
# Use the choices column directly for the intercept-only model
model_formula <- bf(choices ~ 1, family = bernoulli())
prior <- c(prior_string("normal(0, 1)", class = "Intercept"))
model <- brm(model_formula, chains = 2, iter = 2000,
control = list(adapt_delta = 0.99), data = df_model,
prior = prior, save_pars = save_pars(all = TRUE))
# Call bridge_sampler with the compiled model
bridge_sampler_obj <- bridge_sampler(model)
bridge_sampler_obj <- as.numeric(bridge_sampler_obj[1])
print(bridge_sampler_obj)
dict_BICs_prvg3[[name_col]] <- bridge_sampler_obj[1] - LL_null
}
else {
probs_a0 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action0"), colnames(df3))])
probs_a1 <- as.matrix(df3[, grep(paste0(name_col, "_prob[0-3]_action1"), colnames(df3))])
rwds_a0 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action0"), colnames(df3))])
rwds_a1 <- as.matrix(df3[, grep(paste0(name_col, "_rwd[0-3]_action1"), colnames(df3))])
all_rewards <- cbind(rwds_a0, rwds_a1)
all_rewards_max <- apply(all_rewards, 1, max)
r1 <- rwds_a0
r2 <- rwds_a1
p1 <- probs_a0
p2 <- probs_a1
length_data <- nrow(df3)
p1_r1 <- matrix(p1 * r1, nrow = length_data)
p2_r2 <- matrix(p2 * r2, nrow = length_data)
df_a1_a2 <- data.frame(a1 = rowSums(p1_r1)-rowSums(p2_r2))
df_a1_a2$a1_scaled <- scale(df_a1_a2$a1)
df_model <- cbind(df3[c("choices", "sub_num")], df_a1_a2)
model_formula <- bf(choices ~  0+a1_scaled + (0+a1_scaled | sub_num), family = bernoulli())
prior <- c(prior_string("uniform(0.01,10)", lb=0),
prior_(~cauchy(0,1), class = ~sd))
model <- brm(model_formula, chains = 2, iter = 2000,
control = list(adapt_delta = 0.99), data = df_model,
prior = prior, save_pars = save_pars(all = TRUE))
# Call bridge_sampler with the compiled model
bridge_sampler_obj <- bridge_sampler(model)
bridge_sampler_obj<-as.numeric(bridge_sampler_obj[1])
print(bridge_sampler_obj)
dict_BICs_prvg3[[name_cols[counter]]] <- dict_BICs_prvg3[[name_cols[counter]]]+bridge_sampler_obj[1]-LL_null
#if name_cols[counter]=='SR', then add the same entry just added for SR but call is 'MB'
if (name_cols[counter] == 'SR') {
dict_BICs_prvg3[['MB']] <- dict_BICs_prvg3[['SR']]
}}
counter<-counter+1}
# Convert the log marginal likelihoods to a data frame
log_marginal_likelihoods_df <- data.frame(
Variable = names(dict_BICs_prvg3),
LogMarginalLikelihood = as.numeric(unlist(dict_BICs_prvg3)),
stringsAsFactors = FALSE
)
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = "Bayes Factor relative to Null", title = "Model Comparison",face = "bold") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black")) # Reduce size for y-axis title
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
library(ggplot2)
library(ggtext)
librar(ggtext)
library(ggtext)
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = "Bayes Factor relative to Null", title = "**Model Comparison**") +  # Make title bold using markdown
theme(plot.title = element_markdown(hjust = 0.5, size = 40, margin = margin(b = 10)),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black")) # Reduce size for y-axis title
my_plot <- ggplot(log_marginal_likelihoods_df, aes(x = reorder(Variable, LogMarginalLikelihood), y = LogMarginalLikelihood)) +
geom_bar(stat = "identity", fill = "black") +
coord_flip() +
theme_minimal(base_size = 40) +
labs(x = NULL, y = "Bayes Factor relative to Null", title = "Model Comparison",face = "bold") +
theme(plot.title = element_text(hjust = 0.5, size = 40, margin = margin(b = 10),face = "bold"),
plot.background = element_rect(fill = "white", colour = "white", size = 1.5),
panel.grid = element_blank(),
axis.text = element_text(size = 40, color = "black"), # Make all text black
axis.title.x = element_text(size = 40, color = "black"),
axis.title.y = element_text(size = 30, color = "black")) # Reduce size for y-axis title
ggsave("model_comparison.png", plot = my_plot, dpi = 300, width = 10, height = 6, units = "in")
library(lme4)
library(dplyr)
library(arm)
library(lmerTest)
# Define the dataframe df_new here (not shown)
df_new <- read.csv("data_rw_bysub_fixed_full.csv")
setwd("../../Study_6")
setwd("data_main/")
library(lme4)
library(dplyr)
library(arm)
library(lmerTest)
# Define the dataframe df_new here (not shown)
df_new <- read.csv("data_rw_bysub_fixed_full.csv")
# Fit hierarchical regressions and extract BICs
results_lmm <- glmer(Choice~Divergence+AvgSuccProblog+(Divergence+AvgSuccProblog|sub_id)+(1|trial),family="binomial",
data = df_new)
res_obj<-coef(summary(results_lmm))
res_obj
summary(results_lmm)
ols_test_normality(results_lmm)
library(lme4)
library(dplyr)
library(arm)
library(lmerTest)
library("performance")
install.packages("performance", repos = "https://easystats.r-universe.dev")
library(performance)
library(lme4)
library(dplyr)
library(arm)
library(lmerTest)
library(performance)
# Define the dataframe df_new here (not shown)
df_new <- read.csv("data_rw_bysub_fixed_full.csv")
# Fit hierarchical regressions and extract BICs
results_lmm <- glmer(Choice~Divergence+AvgSuccProblog+(Divergence+AvgSuccProblog|sub_id)+(1|trial),family="binomial",
data = df_new)
res_obj<-coef(summary(results_lmm))
res_obj
summary(results_lmm)
check_model(results_lmm)
results_lmm2 <- glmer(Choice~Divergence+AvgPredProblog+(Divergence+AvgPredProblog|sub_id)+(1|trial),family="binomial",
data = df_new)
res_obj2<-coef(summary(results_lmm2))
res_obj2
summary(results_lmm2)
library(lme4)
library(dplyr)
library(arm)
library(lmerTest)
library(performance)
# Define the dataframe df_new here (not shown)
df_new <- read.csv("data_rw_bysub_fixed_full.csv")
# Fit hierarchical regressions and extract BICs
results_lmm <- glmer(Choice~Divergence+AvgSuccProblog+(Divergence+AvgSuccProblog|sub_id)+(1|trial),family="binomial",
data = df_new)
res_obj<-coef(summary(results_lmm))
summary(results_lmm)
check_model(results_lmm)
results_lmm2 <- glmer(Choice~Divergence+AvgPredProblog+(Divergence+AvgPredProblog|sub_id)+(1|trial),family="binomial",
data = df_new)
res_obj2<-coef(summary(results_lmm2))
summary(results_lmm2)
check_model(results_lmm2)
library(lme4)
library(dplyr)
library(arm)
library(lmerTest)
library(performance)
# Define the dataframe df_new here (not shown)
df_new <- read.csv("data_rw_bysub_fixed_full.csv")
# Fit hierarchical regression and extract BICs
results_lmm <- glmer(Choice~Divergence+AvgSuccProblog+(Divergence+AvgSuccProblog|sub_id)+(1|trial), family="binomial", data=df_new)
summary(results_lmm)
# Model diagnostics
print(AIC(results_lmm))
print(BIC(results_lmm))
print(logLik(results_lmm))
print(VarCorr(results_lmm))
plot(resid(results_lmm))
results_lmm2 <- glmer(Choice~Divergence+AvgPredProblog+(Divergence+AvgPredProblog|sub_id)+(1|trial), family="binomial", data=df_new)
summary(results_lmm2)
# Model diagnostics for second model
print(AIC(results_lmm2))
print(BIC(results_lmm2))
print(logLik(results_lmm2))
print(VarCorr(results_lmm2))
plot(resid(results_lmm2))
